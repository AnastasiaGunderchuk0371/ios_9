enum Platform: String {
    case ios = "iOS"
    case android = "Android"
    case web = "Web"
}

// Протокол с функцией и свойствами
protocol Coding {
    var time: String { get }
    var codeCount: Int { get }
    func writeCode(platform: Platform, numberOfSpecialist: Int)
}

// Другой протокол с функцией
protocol CodeProgress {
    func stopCoding()
}

// Класс Компания, подключенный к двум протоколам
class Company: Coding, CodeProgress {
    var numberOfProgrammers: Int
    var specialization: [String]

    init(numberOfProgrammers: Int, specialization: [String]) {
        self.numberOfProgrammers = numberOfProgrammers
        self.specialization = specialization
    }

    var time: String = "12:00"
    var codeCount: Int = 1000

    func writeCode(platform: Platform, numberOfSpecialist: Int) {
        print("Разработка началась. Пишем код для (platform.rawValue) с участием (numberOfSpecialist) специалистов")
    }

    func stopCoding() {
        print("Работа закончена. Сдаю в тестирование")
    }
}

// Пример использования
let myCompany = Company(numberOfProgrammers: 50, specialization: ["ios", "android", "web"])
myCompany.writeCode(platform: .veb, numberOfSpecialist: 5)
myCompany.stopCoding()
